version: '3'
 
services:
  kafka1:
    build:
      context: ./kafka       # Dockerfile ve jmx_exporter_config burada
      dockerfile: Dockerfile # İstersen "dockerfile: Dockerfile" açıkça da yazabilirsin
    container_name: kafka1
    hostname: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka1:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_LISTENERS: 'CONTROLLER://kafka1:29093,PLAINTEXT://kafka1:29092,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:29093,2@kafka2:29093,3@kafka3:29093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      CLUSTER_ID: 'ciWo7IWazngRchmPES6q5A=='
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
    networks:
      - mynetwork
 
  kafka2:
    build:
      context: ./kafka
      dockerfile: Dockerfile
    container_name: kafka2
    hostname: kafka2
    ports:
      - "9093:9093"
      - "29094:29094"
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka2:29094,PLAINTEXT_HOST://localhost:9093'
      KAFKA_LISTENERS: 'CONTROLLER://kafka2:29093,PLAINTEXT://kafka2:29094,PLAINTEXT_HOST://0.0.0.0:9093'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:29093,2@kafka2:29093,3@kafka3:29093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      CLUSTER_ID: 'ciWo7IWazngRchmPES6q5A=='
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
    networks:
      - mynetwork
 
  kafka3:
    build:
      context: ./kafka
      dockerfile: Dockerfile
    container_name: kafka3
    hostname: kafka3
    ports:
      - "9094:9094"
      - "29096:29096"
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka3:29096,PLAINTEXT_HOST://localhost:9094'
      KAFKA_LISTENERS: 'CONTROLLER://kafka3:29093,PLAINTEXT://kafka3:29096,PLAINTEXT_HOST://0.0.0.0:9094'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:29093,2@kafka2:29093,3@kafka3:29093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      CLUSTER_ID: 'ciWo7IWazngRchmPES6q5A=='
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
    networks:
      - mynetwork
 
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:29092,kafka2:29094,kafka3:29096
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks:
      - mynetwork
 
  producer:
    build: ./producer
    environment:
      KAFKA_BROKER_URL: kafka1:29092,kafka2:29094,kafka3:29096
      KAFKA_TOPIC: events
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks:
      - mynetwork
    restart: always
 
  consumer:
    build: ./consumer
    environment:
      KAFKA_BROKER_URL: kafka1:29092,kafka2:29094,kafka3:29096
      KAFKA_TOPIC: events
      MONGO_URI: mongodb://mongo:27017/events_db
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - mongo
    networks:
      - mynetwork
    restart: always
 
  api:
    build: ./api
    environment:
      MONGO_URI: mongodb://mongo:27017/events_db
    ports:
      - "8080:8080"
    depends_on:
      - mongo
    networks:
      - mynetwork
 
  mongo:
    image: mongo
    ports:
      - "27017:27017"
    networks:
      - mynetwork
 
  # ====================== PROMETHEUS =========================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    ports:
      - "9090:9090"
    volumes:
      # prometheus.yml'ı container içine kopyalıyoruz
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - mynetwork


networks:
  mynetwork:
    driver: bridge